import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
from datetime import datetime
import matplotlib.ticker as ticker

def create_energy_distribution_plot(csv_path: str, output_dir: str, bins: int = 30) -> str:
    """
    Generates and saves a histogram plot of energy distribution from a CSV file.

    Args:
        csv_path (str): Path to the input CSV file generated by main_new.py.
        output_dir (str): Directory to save the energy distribution plot.

    Returns:
        str: Path to the saved energy distribution plot image file.
    """
    try:
        df = pd.read_csv(csv_path)
        df = df.to_numpy()

        energy_values = []
        for i in df:
            if i[5] == 0: # Assuming column index 5 contains energy values
                pass
            else:
                energy_values.append(i[5])

        plt.figure(figsize=(10, 7)) # Slightly larger figure for better readability
        
        # Calculate bin edges with more precision
        min_energy = min(energy_values)
        max_energy = max(energy_values)
        bin_width = (max_energy - min_energy) / bins
        bins = np.arange(min_energy, max_energy + bin_width, bin_width)
        
        # Create histogram with more precise bins
        plt.hist(energy_values, bins=bins, color='skyblue', edgecolor='black')
        
        # Format x-axis to show 4 decimal places
        ax = plt.gca()
        ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%.4f'))
        
        plt.xlabel('Misorientation energy (J/mÂ²)')
        plt.ylabel('Frequency (count)')
        plt.title('Energy Distribution for deformed sample')
        plt.grid(True, linestyle='--', alpha=0.7)  # Add subtle grid lines
        
        # Rotate x-axis labels for better readability of decimal places
        plt.xticks(rotation=45)
        
        # Adjust layout to make room for rotated labels
        plt.tight_layout()

        # Generate output file path with timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_filename = f"energy_distribution_{timestamp}.png"
        output_path = os.path.join(output_dir, output_filename)

        plt.savefig(output_path, dpi=300) # Save plot to file in the specified output directory
        plt.close() # Close the plot to free memory

        return output_path # Return the path to the saved image

    except FileNotFoundError:
        raise FileNotFoundError(f"CSV file not found at: {csv_path}")
    except pd.errors.EmptyDataError:
        raise pd.errors.EmptyDataError(f"No data in CSV file at: {csv_path}")
    except Exception as e:
        raise RuntimeError(f"Error generating energy distribution plot: {str(e)}")

if __name__ == "__main__":
    # Example usage (for testing purposes):
    # Replace 'path_to_crystallography_analysis_csv' with the actual path to your CSV output file
    test_csv_path = 'output/crystallography_analysis_20240229_165352.csv' # Example path
    output_directory = 'output' # Example output directory
    try:
        plot_path = create_energy_distribution_plot(test_csv_path, output_directory)
        print(f"Energy distribution plot saved at: {plot_path}")
    except Exception as e:
        print(f"Error: {e}")